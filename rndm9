(vl-load-com)

(defun LM:UnFormat (str mtx / _replace rx)
  "Unformat a formatted string"
  (defun _replace (new old str)
    (vlax-put-property rx 'pattern old)
    (vlax-invoke rx 'replace str new)
  )
  (if (setq rx (vlax-get-or-create-object "VBScript.RegExp"))
    (progn
      (setq str
        (vl-catch-all-apply
          (function
            (lambda ()
              (vlax-put-property rx 'global actrue)
              (vlax-put-property rx 'multiline actrue)
              (vlax-put-property rx 'ignorecase acfalse)
              (foreach pair
                '(
                  ("\032" . "\\\\\\\\")
                  (" " . "\\\\P|\\n|\\t")
                  ("$1" . "\\\\(\\\\[ACcFfHLlOopQTW])|\\\\[ACcFfHLlOopQTW][^\\\\;]*;|\\\\[ACcFfHLlOopQTW]")
                  ("$1$2/$3" . "([^\\\\])\\\\S([^;]*)[/#\\^]([^;]*)")
                  ("$1$2" . "\\\\(\\\\S)|[\\\\](})|}")
                  ("$1" . "[\\\\]({)|{")
                )
                (setq str (_replace (car pair) (cdr pair) str))
              )
              (if mtx
                (_replace "\\\\" "\032" (_replace "\\$1$2$3" "(\\\\[ACcFfHLlOoPpQSTW])|({)|(})" str))
                (_replace "\\" "\032" str)
              )
            )
          )
        )
      )
      (vlax-release-object rx)
      (if (null (vl-catch-all-error-p str))
        str
      )
    )
  )
)

(defun get-item-numbers-and-heights (tables)
  "Get all unique item numbers with their row heights from the first column of tables"
  (setq itemData '())
  (foreach table tables
    (setq rowCount (vla-get-Rows table))
    (setq i 0)
    (while (< i rowCount)
      (setq cellContent (strcase (LM:UnFormat (vla-getText table i 0) nil)))
      (setq rowHeight (vla-getRowHeight table i))
      (if (not (assoc cellContent itemData))
        (setq itemData (append itemData (list (cons cellContent rowHeight)))))
      (setq i (1+ i))))
  itemData)

(defun get-total-row-height (tables itemNumber)
  "Get the total row height of the table with the most rows starting with the given item number"
  (setq maxRows 0)
  (setq totalHeight 0)
  (setq found nil)
  (foreach table tables
    (setq rowCount (vla-get-Rows table))
    (setq cellContent (strcase (LM:UnFormat (vla-getText table 0 0) nil)))
    (if (and (= cellContent itemNumber) (> rowCount maxRows))
      (progn
        (setq maxRows rowCount)
        (setq totalHeight 0)
        (setq i 0)
        (while (< i rowCount)
          (setq totalHeight (+ totalHeight (vla-getRowHeight table i)))
          (setq i (1+ i)))
        (setq found t))))
  (if found totalHeight "NO TABLE"))

(defun move-table-to-coordinate (table coord)
  "Move the given table to the specified coordinate"
  (vla-put-InsertionPoint table (vlax-3D-point coord)))

(defun print-item-numbers-and-heights (itemData tables start-coord)
  "Print item numbers with their row heights in order and coordinates"
  (setq sortedItemData (vl-sort itemData '(lambda (a b) (< (atoi (car a)) (atoi (car b))))))
  (setq index 1)
  (setq current-coord start-coord)
  (setq doNotPlaceList '())
  (setq firstDoNotPlace nil)
  (foreach item sortedItemData
    (setq itemNumber (car item))
    (setq rowHeight (cdr item))
    (setq nextCoord (list (car current-coord) (- (cadr current-coord) rowHeight) (caddr current-coord)))
    (setq totalHeight (get-total-row-height tables itemNumber))
    (if (numberp totalHeight)
      (progn
        (setq adjustedCoord (list (car current-coord) (- (cadr current-coord) totalHeight) (caddr current-coord)))
        (setq place-status (if (> (cadr adjustedCoord) 3.8000) "PLACE" "DO NOT PLACE")))
      (setq adjustedCoord "NO TABLE"
            place-status "PLACE"))
    (princ (strcat (itoa index) ". " itemNumber " " (rtos rowHeight 2 4) " (" (rtos (car current-coord) 2 4) ", " (rtos (cadr current-coord) 2 4) ", " (rtos (caddr current-coord) 2 4) ") (" (if (numberp totalHeight) (strcat (rtos (car adjustedCoord) 2 4) ", " (rtos (cadr adjustedCoord) 2 4) ", " (rtos (caddr adjustedCoord) 2 4)) adjustedCoord) ") " place-status "\n"))
    (if (equal place-status "DO NOT PLACE")
      (progn
        (setq doNotPlaceList (append doNotPlaceList (list (list itemNumber rowHeight adjustedCoord))))
        (if (not firstDoNotPlace)
          (setq firstDoNotPlace item))))
    (setq current-coord nextCoord)
    (setq index (1+ index)))

  ;; Generar la segunda lista desde el primer "DO NOT PLACE"
  (if firstDoNotPlace
    (progn
      (princ "\nDO NOT PLACE List:\n")
      (setq start-coord-doNotPlace (list 17.5948 20.4285 0.0000))
      (setq current-coord-doNotPlace start-coord-doNotPlace)
      (setq index 1)
      (setq firstItemNumber (car firstDoNotPlace))
      (setq remainingItems '())
      ;; Recopilar todos los elementos mayores o iguales al primer "DO NOT PLACE"
      (foreach item sortedItemData
        (if (>= (atoi (car item)) (atoi firstItemNumber))
          (setq remainingItems (append remainingItems (list item)))))
      ;; Imprimir la segunda lista
      (foreach item remainingItems
        (setq itemNumber (car item))
        (setq rowHeight (cdr item))
        (setq nextCoord (list (car current-coord-doNotPlace) (- (cadr current-coord-doNotPlace) rowHeight) (caddr current-coord-doNotPlace)))
        (princ (strcat (itoa index) ". " itemNumber " " (rtos rowHeight 2 4) " (" (rtos (car current-coord-doNotPlace) 2 4) ", " (rtos (cadr current-coord-doNotPlace) 2 4) ", " (rtos (caddr current-coord-doNotPlace) 2 4) ")\n"))
        (setq current-coord-doNotPlace nextCoord)
        (setq index (1+ index)))))

  ;; Mover las tablas a las coordenadas correspondientes
  (foreach table tables
    (setq rowCount (vla-get-Rows table))
    (setq cellContent (strcase (LM:UnFormat (vla-getText table 0 0) nil)))
    (setq targetCoord nil)
    (setq place-status "PLACE")
    (foreach item sortedItemData
      (if (equal (car item) cellContent)
        (progn
          (if (assoc cellContent doNotPlaceList)
            (setq place-status "DO NOT PLACE"))
          (setq targetCoord (if (equal place-status "DO NOT PLACE")
                               (cdr (assoc cellContent doNotPlaceList))
                               (cdr (assoc cellContent sortedItemData))))
          (if targetCoord
            (progn
              (move-table-to-coordinate table (list (car targetCoord) (cadr targetCoord) (caddr start-coord)))
              (princ (strcat "Moving table with item number " cellContent " to coordinate: " (rtos (car targetCoord) 2 4) ", " (rtos (cadr targetCoord) 2 4) ", " (rtos (caddr start-coord) 2 4) "\n")))
            (princ (strcat "Table with item number " cellContent " not moved. No valid coordinate found.\n")))
          (return))))))

(defun C:printItemNumbers ()
  (setq doc (vla-get-ActiveDocument (vlax-get-acad-object)))
  (setq selection (ssget "_X" '((0 . "ACAD_TABLE"))))
  (setq tables '())
  (if selection
    (progn
      (setq i 0)
      (while (< i (sslength selection))
        (setq ent (vlax-EName->VLA-Object (ssname selection i)))
        (if (eq (vla-get-ObjectName ent) "AcDbTable")
          (setq tables (cons ent tables)))
        (setq i (1+ i))))
    (princ "\nNo tables selected."))
  
  ;; Obtener los números de item y alturas de fila
  (setq itemData (get-item-numbers-and-heights tables))
  (setq start-coord (list 1.4673 20.9112 0.0000))
  
  ;; Imprimir números de item y alturas de fila
  (print-item-numbers-and-heights itemData tables start-coord)

  (princ "\nItem numbers and row heights have been processed.")
  (princ)
)





