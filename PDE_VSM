Sub CompareAndExtractData()
    ' Declaring necessary variables
    Dim wsAero As Worksheet, wsDatabase As Worksheet, wsOutput As Worksheet
    Dim wbAero As Workbook, wbDatabase As Workbook
    Dim fDialog As FileDialog
    Dim fileAero As String, fileDatabase As String
    Dim lastRowAero As Long, lastRowDatabase As Long, outputRow As Long
    Dim dict As Object
    Dim changeIssue As Variant
    Dim foundCell As Range
    Dim dataCK As String, dataCN As String, dataCQ As String, dataCR As String
    Dim i As Long
    
    ' Prompt user to select the Aero 2025 file
    Set fDialog = Application.FileDialog(msoFileDialogFilePicker)
    With fDialog
        .Title = "Select the Aero 2025 file"
        .AllowMultiSelect = False
        If .Show <> -1 Then Exit Sub
        fileAero = .SelectedItems(1)
    End With
    
    ' Prompt user to select the Database file
    With fDialog
        .Title = "Select the Database file"
        .AllowMultiSelect = False
        If .Show <> -1 Then Exit Sub
        fileDatabase = .SelectedItems(1)
    End With
    
    ' Open both selected files
    Set wbAero = Workbooks.Open(fileAero)
    Set wbDatabase = Workbooks.Open(fileDatabase)
    
    ' Set references to the specific sheets where we will extract and compare data
    Set wsAero = wbAero.Sheets("Data for VSM")  ' This sheet contains the change issues
    Set wsDatabase = wbDatabase.Sheets("LM6000 Issue Tracker")  ' This sheet contains the full database
    
    ' Create a dictionary to store the Change Issues from Aero 2025 while maintaining order
    Set dict = CreateObject("Scripting.Dictionary")
    
    ' Here we determine the last row in column A of the "Data for VSM" sheet
    lastRowAero = wsAero.Cells(wsAero.Rows.Count, 1).End(xlUp).Row
    
    ' Loop through the "Data for VSM" sheet to store Change Issues in the dictionary
    ' This ensures we only add unique values while keeping their order
    For i = 2 To lastRowAero ' Assuming the first row contains headers
        changeIssue = wsAero.Cells(i, 1).Value
        If Not dict.exists(changeIssue) Then
            dict.Add changeIssue, i
        End If
    Next i
    
    ' Check if the "Data for VSM" sheet already exists in this workbook
    On Error Resume Next
    Set wsOutput = ThisWorkbook.Sheets("Data for VSM")
    If wsOutput Is Nothing Then
        ' If it doesn't exist, create a new one
        Set wsOutput = ThisWorkbook.Sheets.Add
        wsOutput.Name = "Data for VSM"
    End If
    On Error GoTo 0
    
    ' Clearing any existing data from the output sheet before writing new data
    wsOutput.Cells.Clear
    wsOutput.Cells(1, 1).Value = "Change Issue"
    wsOutput.Cells(1, 2).Value = "CK"
    wsOutput.Cells(1, 3).Value = "CN"
    wsOutput.Cells(1, 4).Value = "CQ"
    wsOutput.Cells(1, 5).Value = "CR"
    
    ' The row where we will start writing data in the output sheet
    outputRow = 2
    
    ' Here we determine the last row in the database (Column CF - 84)
    lastRowDatabase = wsDatabase.Cells(wsDatabase.Rows.Count, 84).End(xlUp).Row
    
    ' Now we iterate through each Change Issue in our dictionary
    ' and search for it in the database
    For Each changeIssue In dict.Keys
        Set foundCell = wsDatabase.Range("CF2:CF" & lastRowDatabase).Find(What:=changeIssue, LookAt:=xlWhole)
        
        If Not foundCell Is Nothing Then
            ' If a match is found, extract data from the corresponding row
            dataCK = foundCell.Offset(0, 5).Value  ' CK (89) → Date
            dataCN = foundCell.Offset(0, 8).Value  ' CN (92) → Date
            dataCQ = foundCell.Offset(0, 11).Value ' CQ (95) → Date
            dataCR = foundCell.Offset(0, 12).Value ' CR (96) → Number
            
            ' Convert date values to "21-Nov-24" format
            If IsDate(dataCK) Then dataCK = Format(dataCK, "dd-mmm-yy") Else dataCK = ""
            If IsDate(dataCN) Then dataCN = Format(dataCN, "dd-mmm-yy") Else dataCN = ""
            If IsDate(dataCQ) Then dataCQ = Format(dataCQ, "dd-mmm-yy") Else dataCQ = ""
            If Trim(dataCR) = "" Then dataCR = ""
            
        Else
            ' If no match is found, write the Change Issue but leave other columns blank
            dataCK = ""
            dataCN = ""
            dataCQ = ""
            dataCR = ""
        End If
        
        ' Write results to the output sheet
        wsOutput.Cells(outputRow, 1).Value = changeIssue
        wsOutput.Cells(outputRow, 2).Value = dataCK
        wsOutput.Cells(outputRow, 3).Value = dataCN
        wsOutput.Cells(outputRow, 4).Value = dataCQ
        wsOutput.Cells(outputRow, 5).Value = dataCR
        
        ' Move to the next row for the next Change Issue
        outputRow = outputRow + 1
    Next changeIssue
    
    ' Save both workbooks without closing them
    wbAero.Save
    wbDatabase.Save
    
    ' Display a message to confirm the process has completed
    MsgBox "Process completed successfully. Data extracted into the 'Data for VSM' sheet. Files have been saved.", vbInformation, "Completed"
    
    ' Free memory by releasing object references
    Set wbAero = Nothing
    Set wbDatabase = Nothing
    Set wsAero = Nothing
    Set wsDatabase = Nothing
    Set wsOutput = Nothing
    Set dict = Nothing
End Sub
