(vl-load-com)

(defun LM:UnFormat (str mtx / _replace rx)
  "Unformat a formatted string"
  (defun _replace (new old str)
    (vlax-put-property rx 'pattern old)
    (vlax-invoke rx 'replace str new)
  )
  (if (setq rx (vlax-get-or-create-object "VBScript.RegExp"))
    (progn
      (setq str
        (vl-catch-all-apply
          (function
            (lambda ()
              (vlax-put-property rx 'global actrue)
              (vlax-put-property rx 'multiline actrue)
              (vlax-put-property rx 'ignorecase acfalse)
              (foreach pair
                '(
                  ("\032" . "\\\\\\\\")
                  (" " . "\\\\P|\\n|\\t")
                  ("$1" . "\\\\(\\\\[ACcFfHLlOopQTW])|\\\\[ACcFfHLlOopQTW][^\\\\;]*;|\\\\[ACcFfHLlOopQTW]")
                  ("$1$2/$3" . "([^\\\\])\\\\S([^;]*)[/#\\^]([^;]*);")
                  ("$1$2" . "\\\\(\\\\S)|[\\\\](})|}")
                  ("$1" . "[\\\\]({)|{")
                )
                (setq str (_replace (car pair) (cdr pair) str))
              )
              (if mtx
                (_replace "\\\\" "\032" (_replace "\\$1$2$3" "(\\\\[ACcFfHLlOoPpQSTW])|({)|(})" str))
                (_replace "\\" "\032" str)
              )
            )
          )
        )
      )
      (vlax-release-object rx)
      (if (null (vl-catch-all-error-p str))
        str
      )
    )
  )
)

(defun get-item-numbers-and-heights (tables)
  "Get all unique item numbers with their row heights from the first column of tables"
  (setq itemData '())
  (foreach table tables
    (setq rowCount (vla-get-Rows table))
    (setq i 0)
    (while (< i rowCount)
      (setq cellContent (strcase (LM:UnFormat (vla-getText table i 0) nil)))
      (setq rowHeight (vla-getRowHeight table i))
      (if (not (assoc cellContent itemData))
        (setq itemData (append itemData (list (cons cellContent rowHeight)))))
      (setq i (1+ i))))
  itemData)

(defun print-item-numbers-and-heights (itemData start-coord)
  "Print item numbers with their row heights in order and coordinates"
  (setq sortedItemData (vl-sort itemData '(lambda (a b) (< (atoi (car a)) (atoi (car b))))))
  (setq index 1)
  (setq current-coord start-coord)
  (foreach item sortedItemData
    (princ (strcat (itoa index) ". " (car item) " " (rtos (cdr item) 2 2) " (" (rtos (car current-coord) 2 4) ", " (rtos (cadr current-coord) 2 4) ", " (rtos (caddr current-coord) 2 4) ")\n"))
    (setq current-coord (list (car current-coord) (- (cadr current-coord) (cdr item)) (caddr current-coord)))
    (setq index (1+ index))))

(defun C:printItemNumbers ()
  (setq doc (vla-get-ActiveDocument (vlax-get-acad-object)))
  (setq tables '())
  
  ;; Obtener todas las entidades en el dibujo
  (setq modelSpace (vla-get-ModelSpace doc))
  (vlax-for ent modelSpace
    (if (eq (vlax-get-property ent 'ObjectName) "AcDbTable")
      (setq tables (append tables (list ent)))))
  
  ;; Obtener y ordenar los números de item y alturas de fila
  (setq itemData (get-item-numbers-and-heights tables))
  
  ;; Coordenada inicial, edita aquí según sea necesario
  (setq start-coord (list 1.4673 20.9112 0.0000))
  
  ;; Imprimir los números de item, alturas de fila y coordenadas
  (print-item-numbers-and-heights itemData start-coord)
  (princ))

(princ "\nType 'printItemNumbers' to list item numbers with their row heights and coordinates.\n")
(princ)


Command: RNDM4
1. ITEM NO. 0.50 (1.4673, 20.9112, 0.0000)
2. 74 0.96 (1.4673, 20.4160, 0.0000)
3. 75 1.22 (1.4673, 19.4544, 0.0000)
4. 76 0.49 (1.4673, 18.2298, 0.0000)
5. 77 0.54 (1.4673, 17.7369, 0.0000)
6. 78 0.54 (1.4673, 17.2009, 0.0000)
7. 79 THRU 83 0.73 (1.4673, 16.6650, 0.0000)
8. 84 0.76 (1.4673, 15.9395, 0.0000)
9. 85 THRU 90 0.73 (1.4673, 15.1828, 0.0000)
10. 91 0.96 (1.4673, 14.4574, 0.0000)
11. 92 0.49 (1.4673, 13.4967, 0.0000)
12. 93 0.49 (1.4673, 13.0037, 0.0000)
13. 94 1.43 (1.4673, 12.5107, 0.0000)
14. 95 0.54 (1.4673, 11.0833, 0.0000)
15. 96 THRU 98 0.73 (1.4673, 10.5472, 0.0000)
16. 99 0.73 (1.4673, 9.8218, 0.0000)
17. 100 0.99 (1.4673, 9.0901, 0.0000)
18. 101 0.73 (1.4673, 8.0993, 0.0000)
19. 102 0.73 (1.4673, 7.3677, 0.0000)
20. 103 0.76 (1.4673, 6.6360, 0.0000)
21. 104 0.73 (1.4673, 5.8792, 0.0000)
22. 105 1.24 (1.4673, 5.1477, 0.0000)
23. 106 0.99 (1.4673, 3.9121, 0.0000)
24. 107 1.20 (1.4673, 2.9213, 0.0000)
25. 108 0.97 (1.4673, 1.7218, 0.0000)
26. 109 0.73 (1.4673, 0.7561, 0.0000)
27. 110 0.73 (1.4673, 0.0247, 0.0000)
28. 111 0.73 (1.4673, -0.7068, 0.0000)
29. 112 0.73 (1.4673, -1.4383, 0.0000)
30. 113 0.99 (1.4673, -2.1697, 0.0000)
31. 114 0.97 (1.4673, -3.1605, 0.0000)
32. 115 1.20 (1.4673, -4.1260, 0.0000)
33. 116 0.97 (1.4673, -5.3254, 0.0000)
34. 117 0.73 (1.4673, -6.2909, 0.0000)
35. 118 0.54 (1.4673, -7.0225, 0.0000)
36. 119 0.73 (1.4673, -7.5586, 0.0000)
37. 120 0.73 (1.4673, -8.2902, 0.0000)
38. 121 0.73 (1.4673, -9.0170, 0.0000)
39. 122 0.97 (1.4673, -9.7439, 0.0000)
40. 123 0.97 (1.4673, -10.7095, 0.0000)
41. 124 0.97 (1.4673, -11.6750, 0.0000)
