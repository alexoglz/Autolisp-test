(vl-load-com)

(defun LM:UnFormat (str mtx / _replace rx)
  "Unformat a formatted string"
  (defun _replace (new old str)
    (vlax-put-property rx 'pattern old)
    (vlax-invoke rx 'replace str new)
  )
  (if (setq rx (vlax-get-or-create-object "VBScript.RegExp"))
    (progn
      (setq str
        (vl-catch-all-apply
          (function
            (lambda ()
              (vlax-put-property rx 'global actrue)
              (vlax-put-property rx 'multiline actrue)
              (vlax-put-property rx 'ignorecase acfalse)
              (foreach pair
                '(
                  ("\032" . "\\\\\\\\")
                  (" " . "\\\\P|\\n|\\t")
                  ("$1" . "\\\\(\\\\[ACcFfHLlOopQTW])|\\\\[ACcFfHLlOopQTW][^\\\\;]*;|\\\\[ACcFfHLlOopQTW]")
                  ("$1$2/$3" . "([^\\\\])\\\\S([^;]*)[/#\\^]([^;]*);")
                  ("$1$2" . "\\\\(\\\\S)|[\\\\](})|}")
                  ("$1" . "[\\\\]({)|{")
                )
                (setq str (_replace (car pair) (cdr pair) str))
              )
              (if mtx
                (_replace "\\\\" "\032" (_replace "\\$1$2$3" "(\\\\[ACcFfHLlOoPpQSTW])|({)|(})" str))
                (_replace "\\" "\032" str)
              )
            )
          )
        )
      )
      (vlax-release-object rx)
      (if (null (vl-catch-all-error-p str))
        str
      )
    )
  )
)

(defun get-item-numbers-and-heights (tables)
  "Get all unique item numbers with their row heights from the first column of tables"
  (setq itemData '())
  (foreach table tables
    (setq rowCount (vla-get-Rows table))
    (setq i 0)
    (while (< i rowCount)
      (setq cellContent (strcase (LM:UnFormat (vla-getText table i 0) nil)))
      (setq rowHeight (vla-getRowHeight table i))
      (if (not (assoc cellContent itemData))
        (setq itemData (append itemData (list (cons cellContent rowHeight)))))
      (setq i (1+ i))))
  itemData)

(defun find-table-with-most-rows (tables itemNumber)
  "Find the table with the most rows starting with a given item number"
  (setq maxRows 0)
  (setq selectedTable nil)
  (foreach table tables
    (setq cellContent (strcase (LM:UnFormat (vla-getText table 0 0) nil)))
    (if (and (= cellContent itemNumber) (> (vla-get-Rows table) maxRows))
      (progn
        (setq maxRows (vla-get-Rows table))
        (setq selectedTable table))))
  selectedTable)

(defun get-total-row-height (table)
  "Get the total row height of a table"
  (setq totalHeight 0)
  (setq rowCount (vla-get-Rows table))
  (setq i 0)
  (while (< i rowCount)
    (setq totalHeight (+ totalHeight (vla-getRowHeight table i)))
    (setq i (1+ i)))
  totalHeight)

(defun filter-tables (tables itemNumber)
  "Filter tables that start with a given item number"
  (setq filteredTables '())
  (foreach table tables
    (setq cellContent (strcase (LM:UnFormat (vla-getText table 0 0) nil)))
    (if (= cellContent itemNumber)
      (setq filteredTables (append filteredTables (list table)))))
  filteredTables)

(defun place-tables (tables coord)
  "Place the tables at the specified coordinate"
  (foreach table tables
    (princ (strcat "\nPlacing table starting with " (LM:UnFormat (vla-getText table 0 0) nil) " at " (vl-princ-to-string coord)))
    (vla-put-InsertionPoint table (vlax-3d-point coord))
    (princ "\nTable placed.\n")))

(defun process-item-list (tables itemData startCoord startYOffset threshold)
  (setq currentYOffset startYOffset)
  (setq currentCoord startCoord)
  (setq doNotPlaceList '())
  (foreach item itemData
    (setq itemNumber (car item))
    (setq rowHeight (cdr item))
    (setq table (find-table-with-most-rows tables itemNumber))
    (setq rowAddition (if table (get-total-row-height table) 0))
    (if (not table)
      (setq currentYOffset (- currentYOffset rowHeight))
      (progn
        (setq currentYOffset (- currentYOffset rowAddition))
        (if (> currentYOffset threshold)
          (progn
            (setq currentYOffset (+ currentYOffset rowAddition))
            (place-tables (filter-tables tables itemNumber) currentCoord)
            (setq currentYOffset (+ currentYOffset rowHeight))
            (setq currentCoord (list (car currentCoord) currentYOffset (caddr currentCoord))))
          (progn
            (setq doNotPlaceList (append doNotPlaceList (list item)))
            (return doNotPlaceList))))))
  doNotPlaceList)

(defun process-do-not-place-list (tables itemData startCoord startYOffset)
  (setq currentYOffset startYOffset)
  (setq currentCoord startCoord)
  (foreach item itemData
    (setq itemNumber (car item))
    (setq rowHeight (cdr item))
    (place-tables (filter-tables tables itemNumber) currentCoord)
    (setq currentYOffset (- currentYOffset rowHeight))
    (setq currentCoord (list (car currentCoord) currentYOffset (caddr currentCoord)))))

(defun C:PlaceTables ()
  (setq doc (vla-get-ActiveDocument (vlax-get-acad-object)))
  (setq tables '())
  
  ;; Obtener todas las entidades en el dibujo
  (setq modelSpace (vla-get-ModelSpace doc))
  (vlax-for ent modelSpace
    (if (eq (vlax-get-property ent 'ObjectName) "AcDbTable")
      (setq tables (append tables (list ent)))))
  
  ;; Obtener y ordenar los n√∫meros de item y alturas de fila
  (setq itemData (get-item-numbers-and-heights tables))
  (setq sortedItemData (vl-sort itemData '(lambda (a b) (< (atoi (car a)) (atoi (car b))))))
  
  ;; Coordenadas iniciales
  (setq startCoord1 (list 1.4673 20.9112 0.0000))
  (setq startCoord2 (list 17.5948 20.4285 0.0000))
  
  ;; Procesar la primera lista de items
  (setq doNotPlaceList (process-item-list tables sortedItemData startCoord1 20.9112 3.8))
  
  ;; Procesar la lista de "DO NOT PLACE"
  (when doNotPlaceList
    (process-do-not-place-list tables doNotPlaceList startCoord2 20.4285))
  (princ "\nFinished processing tables.\n"))

(princ "\nType 'PlaceTables' to start placing tables.\n")
(princ)


Command: PLACETABLES
Placing table starting with ITEM NO. at (1.4673 20.9112 0.0)
Table placed.
Placing table starting with ITEM NO. at (1.4673 20.9112 0.0)
Table placed.
Placing table starting with 74 at (1.4673 21.4064 0.0)
Table placed.
Placing table starting with 74 at (1.4673 21.4064 0.0)
Table placed.
Placing table starting with 74 at (1.4673 21.4064 0.0)
Table placed.
Placing table starting with 74 at (1.4673 21.4064 0.0)
Table placed.
Placing table starting with 74 at (1.4673 21.4064 0.0)
Table placed.
Placing table starting with 75 at (1.4673 22.368 0.0)
Table placed.
Placing table starting with 75 at (1.4673 22.368 0.0)
Table placed.
Placing table starting with 76 at (1.4673 23.5926 0.0)
Table placed.
Placing table starting with 76 at (1.4673 23.5926 0.0)
Table placed.
Placing table starting with 76 at (1.4673 23.5926 0.0)
Table placed.
Placing table starting with 76 at (1.4673 23.5926 0.0)
Table placed.
Placing table starting with 79 THRU 83 at (1.4673 24.0855 0.0)
Table placed.
Placing table starting with 84 at (1.4673 23.7391 0.0)
Table placed.
Placing table starting with 84 at (1.4673 23.7391 0.0)
Table placed.
Placing table starting with 84 at (1.4673 23.7391 0.0)
Table placed.
Placing table starting with 91 at (1.4673 24.4958 0.0)
Table placed.
Placing table starting with 91 at (1.4673 24.4958 0.0)
Table placed.
Placing table starting with 94 at (1.4673 24.7312 0.0)
Table placed.
Placing table starting with 94 at (1.4673 24.7312 0.0)
Table placed.
Placing table starting with 99 at (1.4673 25.1727 0.0)
Table placed.
Placing table starting with 99 at (1.4673 25.1727 0.0)
Table placed.
Placing table starting with 100 at (1.4673 24.6429 0.0)
Table placed.
Placing table starting with 100 at (1.4673 24.6429 0.0)
Table placed.
Placing table starting with 100 at (1.4673 24.6429 0.0)
Table placed.
Placing table starting with 106 at (1.4673 25.6337 0.0)
Table placed.
Placing table starting with 106 at (1.4673 25.6337 0.0)
Table placed.
Placing table starting with 108 at (1.4673 22.4372 0.0)
Table placed.
Placing table starting with 108 at (1.4673 22.4372 0.0)
Table placed.
Placing table starting with 108 at (1.4673 22.4372 0.0)
Table placed.
Placing table starting with 119 at (1.4673 22.2033 0.0)
Table placed.
Placing table starting with 119 at (1.4673 22.2033 0.0)
Table placed.
; error: no function definition: WHEN

