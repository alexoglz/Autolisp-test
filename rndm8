(vl-load-com)

(defun LM:UnFormat (str mtx / _replace rx)
  "Unformat a formatted string"
  (defun _replace (new old str)
    (vlax-put-property rx 'pattern old)
    (vlax-invoke rx 'replace str new)
  )
  (if (setq rx (vlax-get-or-create-object "VBScript.RegExp"))
    (progn
      (setq str
        (vl-catch-all-apply
          (function
            (lambda ()
              (vlax-put-property rx 'global actrue)
              (vlax-put-property rx 'multiline actrue)
              (vlax-put-property rx 'ignorecase acfalse)
              (foreach pair
                '(
                  ("\032" . "\\\\\\\\")
                  (" " . "\\\\P|\\n|\\t")
                  ("$1" . "\\\\(\\\\[ACcFfHLlOopQTW])|\\\\[ACcFfHLlOopQTW][^\\\\;]*;|\\\\[ACcFfHLlOopQTW]")
                  ("$1$2/$3" . "([^\\\\])\\\\S([^;]*)[/#\\^]([^;]*);")
                  ("$1$2" . "\\\\(\\\\S)|[\\\\](})|}")
                  ("$1" . "[\\\\]({)|{")
                )
                (setq str (_replace (car pair) (cdr pair) str))
              )
              (if mtx
                (_replace "\\\\" "\032" (_replace "\\$1$2$3" "(\\\\[ACcFfHLlOoPpQSTW])|({)|(})" str))
                (_replace "\\" "\032" str)
              )
            )
          )
        )
      )
      (vlax-release-object rx)
      (if (null (vl-catch-all-error-p str))
        str
      )
    )
  )
)

(defun get-item-numbers-and-heights (tables)
  "Get all unique item numbers with their row heights from the first column of tables"
  (setq itemData '())
  (foreach table tables
    (setq rowCount (vla-get-Rows table))
    (setq i 0)
    (while (< i rowCount)
      (setq cellContent (strcase (LM:UnFormat (vla-getText table i 0) nil)))
      (setq rowHeight (vla-getRowHeight table i))
      (if (not (assoc cellContent itemData))
        (setq itemData (append itemData (list (cons cellContent rowHeight)))))
      (setq i (1+ i))))
  itemData)

(defun get-total-row-height (tables itemNumber)
  "Get the total row height of the table with the most rows starting with the given item number"
  (setq maxRows 0)
  (setq totalHeight 0)
  (setq found nil)
  (foreach table tables
    (setq rowCount (vla-get-Rows table))
    (setq cellContent (strcase (LM:UnFormat (vla-getText table 0 0) nil)))
    (if (and (= cellContent itemNumber) (> rowCount maxRows))
      (progn
        (setq maxRows rowCount)
        (setq totalHeight 0)
        (setq i 0)
        (while (< i rowCount)
          (setq totalHeight (+ totalHeight (vla-getRowHeight table i)))
          (setq i (1+ i)))
        (setq found t))))
  (if found totalHeight "NO TABLE"))

(defun print-item-numbers-and-heights (itemData tables start-coord)
  "Print item numbers with their row heights in order and coordinates"
  (setq sortedItemData (vl-sort itemData '(lambda (a b) (< (atoi (car a)) (atoi (car b))))))
  (setq index 1)
  (setq current-coord start-coord)
  (setq doNotPlaceList '())
  (setq firstDoNotPlace nil)
  (foreach item sortedItemData
    (setq itemNumber (car item))
    (setq rowHeight (cdr item))
    (setq nextCoord (list (car current-coord) (- (cadr current-coord) rowHeight) (caddr current-coord)))
    (setq totalHeight (get-total-row-height tables itemNumber))
    (if (numberp totalHeight)
      (progn
        (setq adjustedCoord (list (car current-coord) (- (cadr current-coord) totalHeight) (caddr current-coord)))
        (setq place-status (if (> (cadr adjustedCoord) 3.8000) "PLACE" "DO NOT PLACE")))
      (setq adjustedCoord "NO TABLE"
            place-status "PLACE"))
    (princ (strcat (itoa index) ". " itemNumber " " (rtos rowHeight 2 4) " (" (rtos (car current-coord) 2 4) ", " (rtos (cadr current-coord) 2 4) ", " (rtos (caddr current-coord) 2 4) ") (" (if (numberp totalHeight) (strcat (rtos (car adjustedCoord) 2 4) ", " (rtos (cadr adjustedCoord) 2 4) ", " (rtos (caddr adjustedCoord) 2 4)) adjustedCoord) ") " place-status "\n"))
    (if (equal place-status "DO NOT PLACE")
      (progn
        (setq doNotPlaceList (append doNotPlaceList (list item)))
        (if (not firstDoNotPlace)
          (setq firstDoNotPlace item))))
    (setq current-coord nextCoord)
    (setq index (1+ index)))

  ;; Generar la segunda lista desde el primer "DO NOT PLACE"
  (if firstDoNotPlace
    (progn
      (princ "\nDO NOT PLACE List:\n")
      (setq start-coord-doNotPlace (list 17.5948 20.4285 0.0000))
      (setq current-coord start-coord-doNotPlace)
      (setq index 1)
      (setq firstItemNumber (car firstDoNotPlace))
      (setq remainingItems '())
      ;; Recopilar todos los elementos mayores o iguales al primer "DO NOT PLACE"
      (foreach item sortedItemData
        (if (>= (atoi (car item)) (atoi firstItemNumber))
          (setq remainingItems (append remainingItems (list item)))))
      ;; Imprimir la segunda lista
      (foreach item remainingItems
        (setq itemNumber (car item))
        (setq rowHeight (cdr item))
        (setq nextCoord (list (car current-coord) (- (cadr current-coord) rowHeight) (caddr current-coord)))
        (princ (strcat (itoa index) ". " itemNumber " " (rtos rowHeight 2 4) " (" (rtos (car current-coord) 2 4) ", " (rtos (cadr current-coord) 2 4) ", " (rtos (caddr current-coord) 2 4) ")\n"))
        (setq current-coord nextCoord)
        (setq index (1+ index))))))

(defun C:printItemNumbers ()
  (setq doc (vla-get-ActiveDocument (vlax-get-acad-object)))
  (setq tables '())
  
  ;; Obtener todas las entidades en el dibujo
  (setq modelSpace (vla-get-ModelSpace doc))
  (vlax-for ent modelSpace
    (if (eq (vlax-get-property ent 'ObjectName) "AcDbTable")
      (setq tables (append tables (list ent)))))
  
  ;; Obtener y ordenar los números de item y alturas de fila
  (setq itemData (get-item-numbers-and-heights tables))
  
  ;; Coordenada inicial, edita aquí según sea necesario
  (setq start-coord (list 1.4673 20.9112 0.0000))
  
  ;; Imprimir los números de item, alturas de fila y coordenadas
  (print-item-numbers-and-heights itemData tables start-coord)
  (princ))

(princ "\nType 'printItemNumbers' to list item numbers with their row heights and coordinates.\n")
(princ)



1. ITEM NO. 0.4952 (1.4673, 20.9112, 0.0000) (1.4673, 20.4160, 0.0000) PLACE
2. 74 0.9616 (1.4673, 20.4160, 0.0000) (1.4673, 18.2298, 0.0000) PLACE
3. 75 1.2246 (1.4673, 19.4544, 0.0000) (1.4673, 18.2298, 0.0000) PLACE
4. 76 0.4929 (1.4673, 18.2298, 0.0000) (1.4673, 16.6650, 0.0000) PLACE
5. 77 0.5359 (1.4673, 17.7369, 0.0000) (NO TABLE) PLACE
6. 78 0.5359 (1.4673, 17.2009, 0.0000) (NO TABLE) PLACE
7. 79 THRU 83 0.7255 (1.4673, 16.6650, 0.0000) (1.4673, 9.8218, 0.0000) PLACE
8. 84 0.7567 (1.4673, 15.9395, 0.0000) (1.4673, 15.1828, 0.0000) PLACE
9. 85 THRU 90 0.7254 (1.4673, 15.1828, 0.0000) (NO TABLE) PLACE
10. 91 0.9607 (1.4673, 14.4574, 0.0000) (1.4673, 13.4967, 0.0000) PLACE
11. 92 0.4930 (1.4673, 13.4967, 0.0000) (NO TABLE) PLACE
12. 93 0.4930 (1.4673, 13.0037, 0.0000) (NO TABLE) PLACE
13. 94 1.4275 (1.4673, 12.5107, 0.0000) (1.4673, 11.0833, 0.0000) PLACE
14. 95 0.5361 (1.4673, 11.0833, 0.0000) (NO TABLE) PLACE
15. 96 THRU 98 0.7254 (1.4673, 10.5472, 0.0000) (NO TABLE) PLACE
16. 99 0.7317 (1.4673, 9.8218, 0.0000) (1.4673, 3.9121, 0.0000) PLACE
17. 100 0.9908 (1.4673, 9.0901, 0.0000) (1.4673, 8.0993, 0.0000) PLACE
18. 101 0.7317 (1.4673, 8.0993, 0.0000) (NO TABLE) PLACE
19. 102 0.7317 (1.4673, 7.3677, 0.0000) (NO TABLE) PLACE
20. 103 0.7568 (1.4673, 6.6360, 0.0000) (NO TABLE) PLACE
21. 104 0.7316 (1.4673, 5.8792, 0.0000) (NO TABLE) PLACE
22. 105 1.2356 (1.4673, 5.1477, 0.0000) (NO TABLE) PLACE
23. 106 0.9907 (1.4673, 3.9121, 0.0000) (1.4673, -12.6406, 0.0000) DO NOT PLACE
24. 107 1.1996 (1.4673, 2.9213, 0.0000) (NO TABLE) PLACE
25. 108 0.9656 (1.4673, 1.7218, 0.0000) (1.4673, -7.0225, 0.0000) DO NOT PLACE
26. 109 0.7315 (1.4673, 0.7561, 0.0000) (NO TABLE) PLACE
27. 110 0.7315 (1.4673, 0.0247, 0.0000) (NO TABLE) PLACE
28. 111 0.7315 (1.4673, -0.7068, 0.0000) (NO TABLE) PLACE
29. 112 0.7315 (1.4673, -1.4383, 0.0000) (NO TABLE) PLACE
30. 113 0.9907 (1.4673, -2.1697, 0.0000) (NO TABLE) PLACE
31. 114 0.9655 (1.4673, -3.1605, 0.0000) (NO TABLE) PLACE
32. 115 1.1994 (1.4673, -4.1260, 0.0000) (NO TABLE) PLACE
33. 116 0.9655 (1.4673, -5.3254, 0.0000) (NO TABLE) PLACE
34. 117 0.7316 (1.4673, -6.2909, 0.0000) (NO TABLE) PLACE
35. 118 0.5361 (1.4673, -7.0225, 0.0000) (NO TABLE) PLACE
36. 119 0.7317 (1.4673, -7.5586, 0.0000) (1.4673, -9.7439, 0.0000) DO NOT PLACE
37. 120 0.7268 (1.4673, -8.2902, 0.0000) (NO TABLE) PLACE
38. 121 0.7268 (1.4673, -9.0170, 0.0000) (NO TABLE) PLACE
39. 122 0.9656 (1.4673, -9.7439, 0.0000) (NO TABLE) PLACE
40. 123 0.9655 (1.4673, -10.7095, 0.0000) (NO TABLE) PLACE
41. 124 0.9656 (1.4673, -11.6750, 0.0000) (NO TABLE) PLACE
DO NOT PLACE List:
1. 106 0.9907 (17.5948, 20.4285, 0.0000)
2. 107 1.1996 (17.5948, 19.4378, 0.0000)
3. 108 0.9656 (17.5948, 18.2382, 0.0000)
4. 109 0.7315 (17.5948, 17.2726, 0.0000)
5. 110 0.7315 (17.5948, 16.5411, 0.0000)
6. 111 0.7315 (17.5948, 15.8096, 0.0000)
7. 112 0.7315 (17.5948, 15.0782, 0.0000)
8. 113 0.9907 (17.5948, 14.3467, 0.0000)
9. 114 0.9655 (17.5948, 13.3560, 0.0000)
10. 115 1.1994 (17.5948, 12.3904, 0.0000)
11. 116 0.9655 (17.5948, 11.1910, 0.0000)
12. 117 0.7316 (17.5948, 10.2255, 0.0000)
13. 118 0.5361 (17.5948, 9.4939, 0.0000)
14. 119 0.7317 (17.5948, 8.9579, 0.0000)
15. 120 0.7268 (17.5948, 8.2262, 0.0000)
16. 121 0.7268 (17.5948, 7.4994, 0.0000)
17. 122 0.9656 (17.5948, 6.7726, 0.0000)
18. 123 0.9655 (17.5948, 5.8069, 0.0000)
19. 124 0.9656 (17.5948, 4.8414, 0.0000)
