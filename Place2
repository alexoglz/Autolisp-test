;; Define the UnFormat String function by Lee Mac
(defun LM:UnFormat (str mtx / _replace rx)
  ;; Function implementation here
)

;; Main function to organize tables
(defun OrganizeTables (/ item-num-heights smallest-item-number start-coord item-coord-pairs all-tables table first-item-number coord)
  ;; Use lists or cons pairs instead of hash tables
  (setq item-num-heights '()) ;; Initialize as an empty list

  ;; Function to collect item numbers and their heights from all tables
  (defun collect-item-numbers-and-heights ()
    (setq all-tables (ssget "X" '((0 . "ACAD_TABLE"))))
    (if all-tables
      (progn
        (setq table-count (sslength all-tables))
        (repeat table-count
          (setq table (vlax-ename->vla-object (ssname all-tables (setq table-count (1- table-count))))))
          (setq rows (vla-get-Rows table))
          (setq row-count (vla-get-Count rows))
          (repeat row-count
            (setq row (vla-Item rows (setq row-count (1- row-count)))))
            (setq item-number (LM:UnFormat (vla-GetText row 0)))
            (setq row-height (vla-get-Height row))
            (setq item-num-heights (cons (list item-number row-height) item-num-heights))
          )
        )
      )
    )
  
  ;; Function to find the smallest item number
  (defun find-smallest-item-number (list)
    (if list
      (setq smallest-item-number (caar list)) ;; Initialize smallest-item-number with the first item number
      (foreach pair list
        (if (< (caar pair) smallest-item-number)
          (setq smallest-item-number (caar pair))
        )
      )
    )
    smallest-item-number
  )

  ;; Function to assign coordinates to item numbers
  (defun assign-coordinates-to-item-numbers (list start-coord)
    (setq item-coord-pairs '()) ;; Initialize as an empty list
    (setq current-coord start-coord)

    (foreach pair list
      (setq current-coord (list (car current-coord) (- (cadr current-coord) (cadar pair)) 0))
      (setq item-coord-pairs (cons (cons (car pair) current-coord) item-coord-pairs))
    )
    (reverse item-coord-pairs) ;; Reverse the list to maintain correct order
  )

  ;; Function to place tables based on item coordinates
  (defun place-tables (item-coord-pairs)
    (setq all-tables (ssget "X" '((0 . "ACAD_TABLE"))))

    (if all-tables
      (progn
        (setq table-count (sslength all-tables))
        (repeat table-count
          (setq table (vlax-ename->vla-object (ssname all-tables (setq table-count (1- table-count))))))
          (setq first-item-number (LM:UnFormat (vla-GetText (vla-Item (vla-get-Rows table) 0) 0)))
          (setq coord (cdr (assoc first-item-number item-coord-pairs)))
          (if coord
            (vla-put-InsertionPoint table coord)
          )
        )
      )
    )
  )

  ;; Main execution starts here
  (collect-item-numbers-and-heights)
  (setq smallest-item-number (find-smallest-item-number item-num-heights))
  (setq start-coord '(10 10 0))
  (setq item-coord-pairs (assign-coordinates-to-item-numbers item-num-heights start-coord))
  (place-tables item-coord-pairs)
  (princ "\nTables organized successfully!")
  (princ)
)
