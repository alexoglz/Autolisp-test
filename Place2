(defun c:organizeTables (/ tables itemNumbers sortedItemNumbers rowCount colCount yOffset coord)

  ;; Initialize variables
  (setq tables (vla-get-ModelSpace (vla-get-ActiveDocument (vlax-get-acad-object))))
  (setq itemNumbers '())
  (setq yOffset 20.3848) ;; Initial y offset

  ;; Iterate over all tables to collect item numbers and row heights
  (vlax-for ent tables
    (if (eq (vlax-get-property ent 'ObjectName) "AcDbTable")
      (progn
        (setq table ent)
        (setq rowCount (vla-get-Rows table))
        (setq colCount (vla-get-Columns table))

        ;; Get the item number and row height of the first row in each table
        (setq cellContent (vla-getText table 0 0))
        (setq unformattedContent (strcase (LM:UnFormat cellContent nil)))
        (setq itemNumber (atoi unformattedContent))
        (setq rowHeight (vla-getRowHeight table 0))

        ;; Store the item number, table object, and row height
        (setq itemNumbers (cons (list itemNumber table rowHeight) itemNumbers))
      )
    )
  )

  ;; Sort item numbers by ascending item number
  (setq sortedItemNumbers (vl-sort itemNumbers '(lambda (a b) (< (car a) (car b)))))

  ;; Initialize the starting coordinate based on the smallest item number
  (setq coord (list 1.5290 yOffset 0))

  ;; Place tables based on sorted item numbers
  (foreach itemData sortedItemNumbers
    (setq itemNumber (car itemData))
    (setq table (cadr itemData))
    (setq rowHeight (caddr itemData))

    ;; Set insertion point for each table based on its item number
    (vla-put-InsertionPoint table (vlax-3d-point coord))

    ;; Update y offset for the next table
    (setq yOffset (- yOffset rowHeight))

    ;; Update coordinate for the next table
    (setq coord (list (car coord) yOffset (caddr coord)))
  )

  ;; Print message
  (princ "\nTables organized and placed.")
  (princ)
)

(princ "\nType organizeTables to organize and place the tables.\n")
(princ)
