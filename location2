(vl-load-com)

(defun get-min-item-number (table)
  "Get the minimum item number from the first column of a table"
  (setq rowCount (vla-get-Rows table))
  (setq minItem (strcase (vla-getText table 0 0)))
  (setq i 1)
  (while (< i rowCount)
    (setq itemNumber (strcase (vla-getText table i 0)))
    (if (< (atoi itemNumber) (atoi minItem))
      (setq minItem itemNumber))
    (setq i (1+ i)))
  minItem)

(defun get-next-min-item-number (tables previousMin)
  "Get the next minimum item number from the first column of all tables"
  (setq nextMinItem "999999")
  (foreach table tables
    (setq itemNumber (strcase (vla-getText table 0 0)))
    (if (and (> (atoi itemNumber) (atoi previousMin))
             (< (atoi itemNumber) (atoi nextMinItem)))
      (setq nextMinItem itemNumber)))
  nextMinItem)

(defun get-tables-with-item-number (tables itemNumber)
  "Get all tables that have the specified item number in the first row"
  (setq matchedTables '())
  (foreach table tables
    (if (= (atoi (strcase (vla-getText table 0 0))) (atoi itemNumber))
      (setq matchedTables (append matchedTables (list table)))))
  matchedTables)

(defun get-row-coordinates (table itemNumber)
  "Get the coordinates of a specific row in a table based on item number"
  (setq rowCount (vla-get-Rows table))
  (setq i 0)
  (while (< i rowCount)
    (if (= (atoi (strcase (vla-getText table i 0))) (atoi itemNumber))
      (progn
        (setq cellCoords (vlax-get (vla-getCellExtents table i 0 0) 'Point))
        (setq i rowCount))) ; break the loop
    (setq i (1+ i)))
  cellCoords)

(defun place-tables-at-coordinate (tables coordinate)
  "Place all tables at the specified coordinate"
  (foreach table tables
    (vla-put-InsertionPoint table coordinate)
    (print (strcat "\nPlaced table at coordinate: " (vl-princ-to-string coordinate)))))

(defun place-tables (tables start-point)
  "Place tables according to their item numbers"
  ;; Place tables with the minimum item number first
  (setq minItemTables (get-tables-with-item-number tables (get-min-item-number (car tables))))
  (place-tables-at-coordinate minItemTables start-point)

  ;; Remove placed tables from the list
  (setq remainingTables (vl-remove-if '(lambda (t) (member t minItemTables)) tables))

  ;; Place remaining tables based on next minimum item number
  (while remainingTables
    (setq previousMinItem (get-min-item-number (car minItemTables)))
    (setq nextMinItem (get-next-min-item-number remainingTables previousMinItem))
    (setq nextMinTables (get-tables-with-item-number remainingTables nextMinItem))

    ;; Find the coordinate to place the next tables
    (setq coord-found nil)
    (vlax-for table (car minItemTables)
      (setq rowCount (vla-get-Rows table))
      (setq i 0)
      (while (and (< i rowCount) (not coord-found))
        (if (= (atoi (strcase (vla-getText table i 0))) (atoi nextMinItem))
