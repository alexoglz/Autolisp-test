(defun C:WORDLE ()
  ;; Function to print game instructions
  (defun print-instructions ()
    (princ "\nWelcome to Wordle!")
    (princ "\nHow to play:")
    (princ "\n1. Guess the 7-letter word.")
    (princ "\n2. If a letter is correct and in the right position, it will be shown in the correct positions.")
    (princ "\n3. If a letter is correct but in the wrong position, it will be shown in the incorrect positions.")
    (princ "\n4. Keep guessing until you find the word.")
    (princ "\nGood luck!")
  )

  ;; Function to get a valid 7-letter guess from the user
  (defun get-guess ()
    ;; Prompt the user to enter a 7-letter word
    (setq guess (getstring "\nEnter a 7-letter word: "))
    ;; Loop until the user enters a word with exactly 7 letters
    (while (/= (strlen guess) 7)
      (princ "\nPlease enter a word with exactly 7 letters.")
      (setq guess (getstring "\nEnter a 7-letter word: "))
    )
    (strcase guess) ; Return the input in uppercase for uniformity
  )

  ;; Function to check the user's guess against the correct word
  (defun check-guess (guess word)
    ;; Initialize empty strings to store correct letters
    (setq correct-positions "")
    (setq correct-letters "")
    (setq i 0)
    ;; Loop through each character in the guess
    (while (< i 7)
      (setq guess-char (substr guess (1+ i) 1))  ;; Get the character from the guess
      (setq word-char (substr word (1+ i) 1))    ;; Get the corresponding character from the correct word
      ;; Check if the character is in the correct position
      (if (= guess-char word-char)
        (setq correct-positions (strcat correct-positions guess-char))
        ;; Check if the character is in the word but in the wrong position
        (if (vl-string-search guess-char word)
          (setq correct-letters (strcat correct-letters guess-char))
        )
      )
      (setq i (1+ i)) ;; Increment the index
    )
    ;; Return the correct positions and correct letters
    (list correct-positions correct-letters)
  )

  ;; Function to print feedback to the user
  (defun print-feedback (guess feedback)
    (setq correct-positions (car feedback)) ;; Get the correct positions from feedback
    (setq correct-letters (cadr feedback))  ;; Get the correct letters from feedback
    ;; Print the user's guess
    (princ (strcat "\n\"" guess "\""))
    ;; Print the letters in the correct positions
    (princ (strcat "\nCorrect letters in correct positions: " correct-positions))
    ;; Print the correct letters in incorrect positions
    (princ (strcat "\nCorrect letters in incorrect positions: " correct-letters))
  )

  ;; Function to print ASCII art of "GE"
  (defun print-ge ()
    ;; Print the ASCII art line by line
    (princ "\n\n GGGGG   EEEEEEE")
    (princ "\nG     G  E")
    (princ "\nG        E")
    (princ "\nG   GGG  EEEE")
    (princ "\nG     G  E")
    (princ "\nG     G  E")
    (princ "\n GGGGG   EEEEEEE\n")
  )

  ;; Function to run the main game loop
  (defun play-game ()
    (setq word "VERNOVA") ;; The correct word to guess
    (setq correct-word-found nil) ;; Flag to check if the correct word is found
    ;; Loop until the correct word is guessed
    (while (not correct-word-found)
      (setq guess (get-guess)) ;; Get the user's guess
      (setq feedback (check-guess guess word)) ;; Check the guess against the correct word
      (print-feedback guess feedback) ;; Print feedback to the user
      ;; Check if the guessed word is correct
      (if (equal (car feedback) word)
        (progn
          (princ "\nCongratulations! You guessed the word correctly.") ;; Congratulate the user
          (print-ge) ;; Print the ASCII art
          (setq correct-word-found t) ;; Set the flag to exit the loop
        )
      )
    )
  )

  ;; Start the game
  (print-instructions) ;; Print game instructions
  (play-game)
  (princ) ;; Print a blank line to end the command gracefully
)

;; Print instructions on how to start the game
(princ "\nType 'WORDLE' to start the game.\n")
(princ)
